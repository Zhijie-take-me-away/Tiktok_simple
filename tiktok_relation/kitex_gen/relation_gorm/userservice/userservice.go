// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	relation_gorm "Tiktok_simple/tmp/kitex_gen/relation_gorm"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*relation_gorm.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Action":       kitex.NewMethodInfo(actionHandler, newUserServiceActionArgs, newUserServiceActionResult, false),
		"FollowList":   kitex.NewMethodInfo(followListHandler, newUserServiceFollowListArgs, newUserServiceFollowListResult, false),
		"FollowerList": kitex.NewMethodInfo(followerListHandler, newUserServiceFollowerListArgs, newUserServiceFollowerListResult, false),
		"FriendList":   kitex.NewMethodInfo(friendListHandler, newUserServiceFriendListArgs, newUserServiceFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation_gorm",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation_gorm.UserServiceActionArgs)
	realResult := result.(*relation_gorm.UserServiceActionResult)
	success, err := handler.(relation_gorm.UserService).Action(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceActionArgs() interface{} {
	return relation_gorm.NewUserServiceActionArgs()
}

func newUserServiceActionResult() interface{} {
	return relation_gorm.NewUserServiceActionResult()
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation_gorm.UserServiceFollowListArgs)
	realResult := result.(*relation_gorm.UserServiceFollowListResult)
	success, err := handler.(relation_gorm.UserService).FollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowListArgs() interface{} {
	return relation_gorm.NewUserServiceFollowListArgs()
}

func newUserServiceFollowListResult() interface{} {
	return relation_gorm.NewUserServiceFollowListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation_gorm.UserServiceFollowerListArgs)
	realResult := result.(*relation_gorm.UserServiceFollowerListResult)
	success, err := handler.(relation_gorm.UserService).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowerListArgs() interface{} {
	return relation_gorm.NewUserServiceFollowerListArgs()
}

func newUserServiceFollowerListResult() interface{} {
	return relation_gorm.NewUserServiceFollowerListResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation_gorm.UserServiceFriendListArgs)
	realResult := result.(*relation_gorm.UserServiceFriendListResult)
	success, err := handler.(relation_gorm.UserService).FriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFriendListArgs() interface{} {
	return relation_gorm.NewUserServiceFriendListArgs()
}

func newUserServiceFriendListResult() interface{} {
	return relation_gorm.NewUserServiceFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Action(ctx context.Context, req *relation_gorm.ActionRequest) (r *relation_gorm.ActionResponse, err error) {
	var _args relation_gorm.UserServiceActionArgs
	_args.Req = req
	var _result relation_gorm.UserServiceActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, req *relation_gorm.FollowListRequest) (r *relation_gorm.FollowListResponse, err error) {
	var _args relation_gorm.UserServiceFollowListArgs
	_args.Req = req
	var _result relation_gorm.UserServiceFollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *relation_gorm.FollowerListRequest) (r *relation_gorm.FollowerListResponse, err error) {
	var _args relation_gorm.UserServiceFollowerListArgs
	_args.Req = req
	var _result relation_gorm.UserServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, req *relation_gorm.FriendListRequest) (r *relation_gorm.FriendListResponse, err error) {
	var _args relation_gorm.UserServiceFriendListArgs
	_args.Req = req
	var _result relation_gorm.UserServiceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
